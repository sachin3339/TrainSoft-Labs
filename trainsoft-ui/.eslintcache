[{"C:\\Users\\goutlaks\\lms\\src\\index.js":"1","C:\\Users\\goutlaks\\lms\\src\\App.js":"2","C:\\Users\\goutlaks\\lms\\src\\Screens\\Auth\\Login.js":"3","C:\\Users\\goutlaks\\lms\\src\\Components\\Header\\Header.js":"4","C:\\Users\\goutlaks\\lms\\src\\Components\\Sidebar\\Sidebar.js":"5","C:\\Users\\goutlaks\\lms\\src\\Screens\\Dashboard\\Dashboard.js":"6","C:\\Users\\goutlaks\\lms\\src\\Screens\\Home\\Home.js":"7","C:\\Users\\goutlaks\\lms\\src\\Screens\\Report\\Report.js":"8","C:\\Users\\goutlaks\\lms\\src\\Screens\\Setting\\Setting.js":"9","C:\\Users\\goutlaks\\TrainSoft-Labs\\trainsoft-ui\\src\\index.js":"10","C:\\Users\\goutlaks\\TrainSoft-Labs\\trainsoft-ui\\src\\App.js":"11","C:\\Users\\goutlaks\\TrainSoft-Labs\\trainsoft-ui\\src\\Screens\\Auth\\Login.js":"12","C:\\Users\\goutlaks\\TrainSoft-Labs\\trainsoft-ui\\src\\Screens\\Dashboard\\Dashboard.js":"13","C:\\Users\\goutlaks\\TrainSoft-Labs\\trainsoft-ui\\src\\Components\\Header\\Header.js":"14","C:\\Users\\goutlaks\\TrainSoft-Labs\\trainsoft-ui\\src\\Components\\Sidebar\\Sidebar.js":"15","C:\\Users\\goutlaks\\TrainSoft-Labs\\trainsoft-ui\\src\\Screens\\Home\\Home.js":"16","C:\\Users\\goutlaks\\TrainSoft-Labs\\trainsoft-ui\\src\\Screens\\Report\\Report.js":"17","C:\\Users\\goutlaks\\TrainSoft-Labs\\trainsoft-ui\\src\\Screens\\Setting\\Setting.js":"18","C:\\Users\\goutlaks\\TrainSoft-Labs\\trainsoft-ui\\src\\Components\\Card\\Card.js":"19","C:\\Users\\goutlaks\\TrainSoft-Labs\\trainsoft-ui\\src\\Components\\Charts\\Charts.js":"20","C:\\Users\\goutlaks\\TrainSoft-Labs\\trainsoft-ui\\src\\Components\\Sidebar\\SidebarConfig.js":"21","C:\\Users\\goutlaks\\TrainSoft-Labs\\trainsoft-ui\\src\\Constant\\Icon.js":"22","C:\\Users\\goutlaks\\TrainSoft-Labs\\trainsoft-ui\\src\\Shared\\Router.js":"23","C:\\Users\\goutlaks\\TrainSoft-Labs\\trainsoft-ui\\src\\Screens\\Batches\\Batches.js":"24","C:\\Users\\goutlaks\\TrainSoft-Labs\\trainsoft-ui\\src\\Screens\\Calender\\Calender.js":"25","C:\\Users\\goutlaks\\TrainSoft-Labs\\trainsoft-ui\\src\\Screens\\Participants\\Participants.js":"26","C:\\Users\\goutlaks\\TrainSoft-Labs\\trainsoft-ui\\src\\Screens\\Labs\\Labs.js":"27","C:\\Users\\goutlaks\\TrainSoft-Labs\\trainsoft-ui\\src\\Screens\\Support\\Support.js":"28","C:\\Users\\goutlaks\\TrainSoft-Labs\\trainsoft-ui\\src\\Services\\MethodFactory.js":"29","C:\\Users\\goutlaks\\TrainSoft-Labs\\trainsoft-ui\\src\\Components\\DynamicTable\\DynamicTable.js":"30","C:\\Users\\goutlaks\\TrainSoft-Labs\\trainsoft-ui\\src\\Components\\Buttons\\Buttons.js":"31","C:\\Users\\goutlaks\\TrainSoft-Labs\\trainsoft-ui\\src\\Components\\InputField\\InputField.js":"32","C:\\Users\\goutlaks\\TrainSoft-Labs\\trainsoft-ui\\src\\Screens\\Batches\\BatchDetails.js":"33","C:\\Users\\goutlaks\\TrainSoft-Labs\\trainsoft-ui\\src\\Components\\Pagination\\Pagination.js":"34","C:\\Users\\goutlaks\\TrainSoft-Labs\\trainsoft-ui\\src\\Screens\\Participants\\ParticipantsDetails.js":"35"},{"size":227,"mtime":1611041483818,"results":"36","hashOfConfig":"37"},{"size":511,"mtime":1611221516407,"results":"38","hashOfConfig":"37"},{"size":1249,"mtime":1611223955242,"results":"39","hashOfConfig":"37"},{"size":1155,"mtime":1611049157547,"results":"40","hashOfConfig":"37"},{"size":740,"mtime":1611223246807,"results":"41","hashOfConfig":"37"},{"size":760,"mtime":1611221507922,"results":"42","hashOfConfig":"37"},{"size":100,"mtime":1611218733618,"results":"43","hashOfConfig":"37"},{"size":104,"mtime":1611218746757,"results":"44","hashOfConfig":"37"},{"size":107,"mtime":1611218790042,"results":"45","hashOfConfig":"37"},{"size":243,"mtime":1611726647223,"results":"46","hashOfConfig":"47"},{"size":444,"mtime":1611726647073,"results":"48","hashOfConfig":"47"},{"size":934,"mtime":1611726647151,"results":"49","hashOfConfig":"47"},{"size":1575,"mtime":1611839100465,"results":"50","hashOfConfig":"47"},{"size":2616,"mtime":1611726647125,"results":"51","hashOfConfig":"47"},{"size":596,"mtime":1611726647132,"results":"52","hashOfConfig":"47"},{"size":5338,"mtime":1611726647179,"results":"53","hashOfConfig":"47"},{"size":104,"mtime":1611726647196,"results":"54","hashOfConfig":"47"},{"size":107,"mtime":1611726647200,"results":"55","hashOfConfig":"47"},{"size":466,"mtime":1611726647104,"results":"56","hashOfConfig":"47"},{"size":2914,"mtime":1611726647111,"results":"57","hashOfConfig":"47"},{"size":1163,"mtime":1611726647136,"results":"58","hashOfConfig":"47"},{"size":17271,"mtime":1611836116042,"results":"59","hashOfConfig":"47"},{"size":484,"mtime":1611726647218,"results":"60","hashOfConfig":"47"},{"size":8194,"mtime":1611818353454,"results":"61","hashOfConfig":"47"},{"size":110,"mtime":1611726647171,"results":"62","hashOfConfig":"47"},{"size":8262,"mtime":1611839521441,"results":"63","hashOfConfig":"47"},{"size":98,"mtime":1611726647187,"results":"64","hashOfConfig":"47"},{"size":107,"mtime":1611726647205,"results":"65","hashOfConfig":"47"},{"size":406,"mtime":1611726647210,"results":"66","hashOfConfig":"47"},{"size":10986,"mtime":1611741314765,"results":"67","hashOfConfig":"47"},{"size":1607,"mtime":1611808390224,"results":"68","hashOfConfig":"47"},{"size":1652,"mtime":1611811385246,"results":"69","hashOfConfig":"47"},{"size":5902,"mtime":1611824857166,"results":"70","hashOfConfig":"47"},{"size":4646,"mtime":1611825421981,"results":"71","hashOfConfig":"47"},{"size":6295,"mtime":1611836473129,"results":"72","hashOfConfig":"47"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},"1x6u19f",{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},"ds9ynd",{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"94"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"94"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"94"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"94"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"94"},"C:\\Users\\goutlaks\\lms\\src\\index.js",[],["150","151"],"C:\\Users\\goutlaks\\lms\\src\\App.js",["152","153"],"C:\\Users\\goutlaks\\lms\\src\\Screens\\Auth\\Login.js",[],"C:\\Users\\goutlaks\\lms\\src\\Components\\Header\\Header.js",[],"C:\\Users\\goutlaks\\lms\\src\\Components\\Sidebar\\Sidebar.js",[],"C:\\Users\\goutlaks\\lms\\src\\Screens\\Dashboard\\Dashboard.js",["154","155"],"C:\\Users\\goutlaks\\lms\\src\\Screens\\Home\\Home.js",[],"C:\\Users\\goutlaks\\lms\\src\\Screens\\Report\\Report.js",[],"C:\\Users\\goutlaks\\lms\\src\\Screens\\Setting\\Setting.js",[],"C:\\Users\\goutlaks\\TrainSoft-Labs\\trainsoft-ui\\src\\index.js",[],["156","157"],"C:\\Users\\goutlaks\\TrainSoft-Labs\\trainsoft-ui\\src\\App.js",[],"C:\\Users\\goutlaks\\TrainSoft-Labs\\trainsoft-ui\\src\\Screens\\Auth\\Login.js",[],"C:\\Users\\goutlaks\\TrainSoft-Labs\\trainsoft-ui\\src\\Screens\\Dashboard\\Dashboard.js",["158"],"C:\\Users\\goutlaks\\TrainSoft-Labs\\trainsoft-ui\\src\\Components\\Header\\Header.js",[],"C:\\Users\\goutlaks\\TrainSoft-Labs\\trainsoft-ui\\src\\Components\\Sidebar\\Sidebar.js",[],"C:\\Users\\goutlaks\\TrainSoft-Labs\\trainsoft-ui\\src\\Screens\\Home\\Home.js",[],"C:\\Users\\goutlaks\\TrainSoft-Labs\\trainsoft-ui\\src\\Screens\\Report\\Report.js",[],"C:\\Users\\goutlaks\\TrainSoft-Labs\\trainsoft-ui\\src\\Screens\\Setting\\Setting.js",[],"C:\\Users\\goutlaks\\TrainSoft-Labs\\trainsoft-ui\\src\\Components\\Card\\Card.js",[],"C:\\Users\\goutlaks\\TrainSoft-Labs\\trainsoft-ui\\src\\Components\\Charts\\Charts.js",[],"C:\\Users\\goutlaks\\TrainSoft-Labs\\trainsoft-ui\\src\\Components\\Sidebar\\SidebarConfig.js",[],"C:\\Users\\goutlaks\\TrainSoft-Labs\\trainsoft-ui\\src\\Constant\\Icon.js",[],"C:\\Users\\goutlaks\\TrainSoft-Labs\\trainsoft-ui\\src\\Shared\\Router.js",[],"C:\\Users\\goutlaks\\TrainSoft-Labs\\trainsoft-ui\\src\\Screens\\Batches\\Batches.js",[],"C:\\Users\\goutlaks\\TrainSoft-Labs\\trainsoft-ui\\src\\Screens\\Calender\\Calender.js",[],"C:\\Users\\goutlaks\\TrainSoft-Labs\\trainsoft-ui\\src\\Screens\\Participants\\Participants.js",["159","160"],"C:\\Users\\goutlaks\\TrainSoft-Labs\\trainsoft-ui\\src\\Screens\\Labs\\Labs.js",[],"C:\\Users\\goutlaks\\TrainSoft-Labs\\trainsoft-ui\\src\\Screens\\Support\\Support.js",[],"C:\\Users\\goutlaks\\TrainSoft-Labs\\trainsoft-ui\\src\\Services\\MethodFactory.js",[],"C:\\Users\\goutlaks\\TrainSoft-Labs\\trainsoft-ui\\src\\Components\\DynamicTable\\DynamicTable.js",["161","162","163","164","165","166"],"import React, { useState, useEffect } from 'react';\r\nimport { Table, OverlayTrigger, Dropdown, Tooltip } from 'react-bootstrap';\r\nimport { ICN_ARROW_DOWN,ICN_MORE } from '../../Constant/Icon';\r\nimport { CustomToggle } from '../../Services/MethodFactory';\r\nimport './dynamicTable.css';\r\nconst htmlParser = require('html-react-parser');\r\nconst NO_ARROW_HIGHLIGHTED = ICN_ARROW_DOWN\r\nconst HIGHLIGHT_UP_ARROW = ICN_ARROW_DOWN;\r\nconst HIGHLIGHT_DOWN_ARROW = ICN_ARROW_DOWN;\r\n/*\r\n    Sort the array by key.\r\n    @param {Array of Objects} arr - Array of object which is source data\r\n    @param {String} key - Object key which is used to sort the array\r\n    @param {Boolean} isAsc - Default ascending order is true\r\n    @return {Array of Objects} - Returns sorted array\r\n*/\r\nconst sortByKey = (arr = [], key = \"\", isAsc = true) => (Array.isArray(arr) && key) ? (arr.sort((a, b) => (typeof a[key] === 'string' ? a[key].toUpperCase() : a[key]) > (typeof b[key] === 'string' ? b[key].toUpperCase() : b[key]) !== isAsc ? -1 : 1)) : arr;\r\n\r\n/*\r\n    Applies filter on table rows for search enabled configuration only by search query.\r\n    @param {Array of Objects} data - Array of object which is source data\r\n    @param {Object} configuration - Table configuration such as columns and it's actions\r\n    @param {String} str - Search query string\r\n    @return {Array of Objects}\r\n*/\r\nconst applyFilter = (data = [], configuration = {}, str = \"\") => {\r\n    let filteredArr = [];\r\n    try {\r\n        if (typeof str === \"string\" && str) {\r\n            let searchEnabledColumns = Object.keys(configuration.columns).filter(key => configuration.columns[key].isSearchEnabled); // Returns search enabled configuration key only\r\n            filteredArr = data.filter(elem => searchEnabledColumns.some(key => elem[key].toUpperCase().indexOf(str.toUpperCase()) >= 0))\r\n        } else {\r\n            filteredArr = data\r\n        }\r\n    } catch (err) {\r\n        filteredArr = data;\r\n    }\r\n    return filteredArr;\r\n}\r\n\r\n/*\r\n    Returns custom field as per configuration.\r\n    @param {Object} config - Column configurations\r\n    @param {String} key - Source data Object key\r\n    @param {Any} val - source data object value\r\n    @return {JSX} - Table data(td)\r\n*/\r\nconst getTableData = (config = {}, data = {}, key = \"\") => {\r\n    let temp = data[key];\r\n    try {\r\n        if (config.render) temp = config.render(data, key);\r\n        if (temp === null || temp === undefined || temp === \"\") temp = \"NA\"; // display NA-Not Available if data is not available\r\n    } catch (err) {\r\n        console.error(\"Exception occurred in getTableData -- \" + err);\r\n    }\r\n    return temp;\r\n}\r\n\r\n/*\r\n    Constructing table header.\r\n    @param {Object} columns - It has all the table configuration such as columns and it's actions\r\n    @param {String} headerTextColor - Custom css class\r\n    @param {Function} updateSortBy - this is the callback function\r\n    @param {Object} configuration -Table configuration such as columns and it's actions\r\n    @return {JSX} - Table header(th)\r\n*/\r\nconst TableHeader = ({ columns = {}, headerTextColor = \"\", updateSortBy, sortBy, actions, showCheckbox, isSelectedAll, onSelectAll }) => <tr>\r\n    {showCheckbox && <th style={{ 'width': '10px', \"padding\": \"8px 18px\" }}>\r\n        <div className=\"custom-input\">\r\n            <input type=\"checkbox\" id=\"select-all\" checked={isSelectedAll} onChange={(e) => onSelectAll(e.target.checked)} />\r\n            <label htmlFor=\"select-all\"></label>\r\n        </div>\r\n    </th>}\r\n    {Object.keys(columns).map((key, i) => {\r\n\r\n\r\n\r\n        return <th key={i} className={(key === sortBy && columns[key].sortEnabled) ? \"active-sort\" : \"\"} style={{ width: columns[key].width, color: headerTextColor }} onClick={() => { if (columns[key].sortEnabled && typeof updateSortBy === 'function') updateSortBy(key) }}>\r\n            {columns[key].title && <div> {typeof columns[key].title === 'string' && columns[key].title}{typeof updateSortBy === 'function' && <span>&emsp;{(typeof columns[key].title === 'string' && (key === sortBy)) ? (columns[key].sortDirection ? HIGHLIGHT_UP_ARROW : HIGHLIGHT_DOWN_ARROW) : ((columns[key].sortEnabled) ? NO_ARROW_HIGHLIGHTED : \"\")}</span>}</div>}\r\n        </th>\r\n    })}\r\n    {actions && actions.length > 0 && <th style={{ \"width\": \"50px\" }}></th>}\r\n</tr>\r\n\r\n/*\r\n    Constructing table body which is rows(tr).\r\n    @param {Array of Objects} sourceData - Row data's\r\n    @param {Object} configuration -Table configuration such as columns and it's actions\r\n    @return {JSX} - Table header(th)\r\n*/\r\nconst TableBody = ({ sourceData, configuration, onSelect }) => sourceData.map((data, idx) => <tr key={idx}>\r\n    {/* key mapping. Note: key should be same as table key*/}\r\n    {configuration.showCheckbox && <td style={{ 'width': '10px', \"padding\": \"8px 18px\" }}>\r\n        <div className=\"custom-input\">\r\n            <input type=\"checkbox\" id={idx} checked={data.isChecked} onChange={(e) => onSelect(e.target.checked, idx)} />\r\n            <label htmlFor={idx}></label>\r\n        </div>\r\n    </td>}\r\n    {Object.keys(configuration.columns).map((key, rowIdx) => <td key={rowIdx} className={`${configuration.columns[key].tdCustomClass ? configuration.columns[key].tdCustomClass : \"elps\"} ${getTableData(configuration.columns[key], data, key) === \"NA\" ? \"text-muted\" : \"\"}`} onClick={() => { if (typeof configuration.columns[key].onClick === 'function') configuration.columns[key].onClick(data) }}>\r\n        {configuration.showTooltip ? <OverlayTrigger placement='auto' flip={true} overlay={<Tooltip>{data[key] || configuration.columns[key].title}</Tooltip>}><span>{getTableData(configuration.columns[key], data, key)}</span></OverlayTrigger> : <span>{getTableData(configuration.columns[key], data, key)}</span>}\r\n    </td>)}\r\n    {configuration.actions && configuration.actions.length > 0 && <td className=\"text-right\"><Action {...{ configuration, \"row\": data, index: idx }} /></td>}\r\n</tr>)\r\n\r\n/*\r\n    Constructing table row action.\r\n    @param {Object} configuration -Table configuration such as columns and it's actions\r\n    @param {Object} row - Row object\r\n    @return {JSX} - Dropdown with set of actions which passed through props\r\n*/\r\nconst Action = ({ configuration = {}, row = {}, index = null }) => <Dropdown alignRight={configuration.actionAlignment ? configuration.actionAlignment : true}>\r\n    <Dropdown.Toggle as={CustomToggle} variant={configuration.actionVariant ? configuration.actionVariant : \"\"} className={configuration.actionCustomClass} id={\"actions-\" + Math.random()} >\r\n        {ICN_MORE}\r\n    </Dropdown.Toggle>\r\n    <Dropdown.Menu size=\"sm\" >\r\n        {\r\n            configuration.actions.filter(action => (!action.rule || (typeof action.rule === \"function\" && action.rule(row)))).map((action, i) => <Dropdown.Item key={i} onClick={(e) => {\r\n                if (typeof action.onClick === 'function')\r\n                    action.onClick(row, index);\r\n            }} as=\"button\">\r\n                <span className=\"action-icon\">{action.icon}</span>{action.title}\r\n            </Dropdown.Item>)\r\n        }\r\n    </Dropdown.Menu>\r\n</Dropdown>\r\n\r\n/*\r\n    React bootstrap table component, It can be used where data to represented in table format.\r\n    @param {Object} props - The date required data to build a table\r\n    @return {JSX} - Table\r\n*/\r\nexport const DynamicTable = (props) => {\r\n    const [sourceData, setSourceData] = useState(props.sourceData);\r\n    const [isSelectedAll, setSelectedAll] = useState(false);\r\n    /**\r\n\t\tFires when user clicked on single checkbox.\r\n\t\t@param {Boolean} checked - This is checkbox event value\r\n\t*/\r\n    const onSelect = (checked, idx) => {\r\n        try {\r\n            let flag = checked;\r\n            let tempData = sourceData[idx];\r\n            if (tempData) {\r\n                tempData.isChecked = checked;\r\n                setSourceData([...sourceData]);\r\n                setSelectedAll(flag ? ((sourceData.filter(sd => sd.isChecked)).length === sourceData.length) : flag);\r\n                props.onSelected(sourceData.filter(e => e.isChecked)); // Invoking callback method when there user take an action of checkbox\r\n            }\r\n        } catch (err) {\r\n            console.error(\"Exception occurred in onSelect -- \" + err);\r\n        }\r\n    }\r\n\r\n    /**\r\n\t\tFires when user clicked on select all checkbox.\r\n\t\t@param {Boolean} checked - This is checkbox event value\r\n\t*/\r\n    const onSelectAll = (flag) => {\r\n        try {\r\n            if (Array.isArray(sourceData) && sourceData.length > 0) {\r\n                for (let i = 0, l = sourceData.length; i < l; i++)\r\n                    sourceData[i].isChecked = flag;\r\n                setSourceData([...sourceData]);\r\n                setSelectedAll(flag);\r\n                props.onSelected(sourceData.filter(e => e.isChecked)); // Invoking callback method when there user take an action of checkbox\r\n            }\r\n        } catch (err) {\r\n            console.error(\"Exception occurred in onSelectAll -- \" + err);\r\n        }\r\n    }\r\n\r\n    // Listening for source data change and updates checkbox isSelected.\r\n    useEffect(() => {\r\n        if (Array.isArray(sourceData) && sourceData.length > 0) {\r\n            let temp = sourceData.filter(d => d.isChecked);\r\n            if (temp.length === sourceData.length && !isSelectedAll) setSelectedAll(true);\r\n        }\r\n    }, [sourceData]);\r\n\r\n    // Listening for source data change and update the same in source data\r\n    useEffect(() => {\r\n        if (Array.isArray(props.sourceData)) setSourceData(props.sourceData);\r\n    }, [props.sourceData]);\r\n\r\n    // Listening for clear selection value change\r\n    useEffect(() => {\r\n        if (props.configuration.clearSelection) onSelectAll(false);\r\n    }, [props.configuration.clearSelection]);\r\n\r\n    // Listen sortBy, sortDirection and update the data source\r\n    useEffect(() => {\r\n        setSourceData(sortByKey(applyFilter(sourceData, props.configuration, props.configuration.searchQuery), props.configuration.sortBy, props.configuration.sortDirection));\r\n    }, [props.configuration.sortBy, props.configuration.sortDirection])\r\n\r\n    return <Table className={props.configuration.tableCustomClass ? props.configuration.tableCustomClass : \"ng-table\"}>\r\n        <thead>\r\n            <TableHeader {...{ ...props.configuration, isSelectedAll, onSelectAll }} />\r\n        </thead>\r\n        <tbody>\r\n            {Array.isArray(sourceData) && sourceData.length > 0 && <TableBody {...{ ...props, sourceData, onSelect }} />}\r\n            {\r\n                (!Array.isArray(sourceData) || sourceData.length <= 0) && <tr className=\"text-center\">\r\n                    <td colSpan={Object.keys(props.configuration.columns).length + (props.configuration.actions ? 1 : 0) + (props.configuration.showCheckbox ? 1 : 0)} className=\"no-item-show mt-4\">\r\n                        {props.errorMessage || \"There's no records\"}\r\n                    </td>\r\n                </tr>\r\n            }\r\n        </tbody>\r\n    </Table>\r\n}\r\nexport default DynamicTable;","C:\\Users\\goutlaks\\TrainSoft-Labs\\trainsoft-ui\\src\\Components\\Buttons\\Buttons.js",[],"C:\\Users\\goutlaks\\TrainSoft-Labs\\trainsoft-ui\\src\\Components\\InputField\\InputField.js",["167"],"import React from 'react';\r\nimport {  ErrorMessage, Field } from 'formik';\r\nimport {Form} from 'react-bootstrap'\r\nimport './inputField.css'\r\nimport { ICN_EVENT } from '../../Constant/Icon';\r\n\r\n\r\n/*\r\n    Common button for cancel\r\n    @param {Objects} className - optional className for Cancel\r\n    @param {function} onClick - callback function\r\n    @param {children} props default property\r\n*/\r\nexport const TextInput = ({ label='',name }) => {\r\n    return (<>\r\n        <Form.Label className=\"label\">{label}</Form.Label>\r\n        <div className=\"input-field\">\r\n        <Field name={name} className=\"form-control form-control-sm\" />\r\n        </div>\r\n        <ErrorMessage component={name} name=\"province\" className=\"text-danger mb-2 small-text\" />\r\n    </>)\r\n}\r\n\r\nexport const DateInput = ({ label='',name }) => {\r\n    return (<>\r\n        <Form.Label className=\"label\">{label}</Form.Label>\r\n        <div className=\"input-field\">\r\n        <Field type=\"date\" name={name} className=\"form-control form-control-sm\" />\r\n         {/* {ICN_EVENT} */}\r\n        </div>\r\n        <ErrorMessage component={name} name=\"province\" className=\"text-danger mb-2 small-text\" />\r\n    </>)\r\n}\r\n\r\nexport const SelectInput = ({ label='',name, option=[] }) => {\r\n    return (<>\r\n        <Form.Label className=\"label\">{label}</Form.Label>\r\n        <div className=\"input-field\">\r\n           <Field as=\"select\" name={name} className=\"form-control form-control-sm\" >\r\n           {option.map(res => <option value={res}>{res}</option>)}\r\n           </Field>\r\n        </div>\r\n        <ErrorMessage component={name} name=\"province\" className=\"text-danger mb-2 small-text\" />\r\n    </>)\r\n}","C:\\Users\\goutlaks\\TrainSoft-Labs\\trainsoft-ui\\src\\Screens\\Batches\\BatchDetails.js",["168"],"import { useState } from \"react\";\r\nimport './batches.css'\r\nimport DynamicTable from \"../../Components/DynamicTable/DynamicTable\";\r\nimport { ICN_TRASH,ICN_EDIT  } from \"../../Constant/Icon\";\r\nimport PaginationOne from \"../../Components/Pagination/Pagination\";\r\n\r\n\r\n\r\nconst dummyData =[\r\n    {name: 'Jessie Buchanan',empId: '10290',emailId:'benits@msn.com',phoneNo:'(659) 768-1869',department:'Information Technology'},\r\n    {name: 'Lisa Palmer',empId: '10290',emailId:'drewf@optonline.net',phoneNo:'(659) 768-1869',department:'Information Technology'},\r\n    {name: 'Donna Higgins',empId: '10290',emailId:'devphil@sbcglobal.net',phoneNo:'(659) 768-1869',department:'Information Technology'},\r\n    {name: 'Bob Norris',empId: '10290',emailId:'cliffski@me.com',phoneNo:'(659) 768-1869',department:'Information Technology'},\r\n    {name: 'Tonya Walters',empId: '10290',emailId:'22 june 2020',phoneNo:'(659) 768-1869',department:'Information Technology'},\r\n\r\n]\r\n\r\nconst createBatches = {\r\n    batchName: '',\r\n    trainingType: '',\r\n    endDate:'',\r\n    startDate: '',\r\n    course:'',\r\n    instructor:''\r\n\r\n}\r\nconst BatchesDetails = () => {\r\n    const [configuration, setConfiguration] = useState({\r\n        columns: {\r\n            \"name\": {\r\n                \"title\": \"Name\",\r\n                \"sortDirection\": null,\r\n                \"sortEnabled\": false,\r\n                isSearchEnabled: false,\r\n            },\r\n            \"empId\": {\r\n                \"title\": \"Emp Id\",\r\n                \"sortDirection\": null,\r\n                \"sortEnabled\": false,\r\n                isSearchEnabled: false\r\n            }\r\n            ,\r\n            \"emailId\": {\r\n                \"title\": \"Email Id\",\r\n                \"sortDirection\": null,\r\n                \"sortEnabled\": false,\r\n                isSearchEnabled: false\r\n            }\r\n            ,\r\n            \"phoneNo\": {\r\n                \"title\": \"Phone Number\",\r\n                \"sortDirection\": null,\r\n                \"sortEnabled\": false,\r\n                isSearchEnabled: false\r\n            }\r\n            ,\r\n            \"department\": {\r\n                \"title\": \"Department\",\r\n                \"sortDirection\": null,\r\n                \"sortEnabled\": false,\r\n                isSearchEnabled: false\r\n            }\r\n        },\r\n        headerTextColor: '#454E50', // user can change table header text color\r\n        sortBy: null,  // by default sort table by name key\r\n        sortDirection: false, // sort direction by default true\r\n        updateSortBy: (sortKey) => {\r\n            configuration.sortBy = sortKey;\r\n            Object.keys(configuration.columns).map(key => configuration.columns[key].sortDirection = (key === sortKey) ? !configuration.columns[key].sortDirection : false);\r\n            configuration.sortDirection = configuration.columns[sortKey].sortDirection;\r\n            setConfiguration({ ...configuration });\r\n        },\r\n        actions: [\r\n            {\r\n                \"title\": \"Edit\",\r\n                \"icon\": ICN_EDIT,\r\n                \"onClick\": (data, i) => console.log(data)\r\n            },\r\n            {\r\n                \"title\": \"Delete\",\r\n                \"icon\": ICN_TRASH,\r\n                \"onClick\": (data, i) => console.log(data)\r\n            }\r\n        ],\r\n        actionCustomClass: \"no-chev esc-btn-dropdown\", // user can pass their own custom className name to add/remove some css style on action button\r\n        actionVariant: \"\", // user can pass action button variant like primary, dark, light,\r\n        actionAlignment: true, // user can pass alignment property of dropdown menu by default it is alignLeft \r\n        // call this callback function onSearch method in input field on onChange handler eg: <input type=\"text\" onChange={(e) => onSearch(e.target.value)}/>\r\n        // this search is working for search enable fields(column) eg. isSearchEnabled: true, in tale column configuration\r\n        searchQuery: \"\",\r\n        tableCustomClass: \"ng-table sort-enabled table-borderless\", // table custom class\r\n        showCheckbox: false,\r\n        clearSelection: false\r\n    });\r\n    return (<div className=\"table-shadow\">\r\n        <div className=\"bDetail-action\">\r\n            <div className=\"full-w \">\r\n            <div>\r\n                <div className=\"\">Batches Details</div>\r\n            </div>\r\n            <div className=\"batch-info\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-6\">Batch Name</div>\r\n                        <div className=\"col-6 mb-4\">ITU_01</div>\r\n                        <div className=\"col-6\">Status</div>\r\n                        <div className=\"col-6\">Active</div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-6\">Technology Name</div>\r\n                        <div className=\"col-6  mb-4\">Angular</div>\r\n                        <div className=\"col-6\">Start Date</div>\r\n                        <div className=\"col-6\">20 july 2020</div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-6\">Creation Date </div>\r\n                        <div className=\"col-6  mb-4\">20 july 2020</div>\r\n                        <div className=\"col-6\">End Date</div>\r\n                        <div className=\"col-6\">20 july 2020</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        </div>\r\n        <DynamicTable {...{configuration,sourceData: dummyData}}/>\r\n        <div className=\"pagination-div\">\r\n        <PaginationOne totalCount={30}  onNavigate={(pageNumber) => console.log(pageNumber)}/>\r\n\r\n        </div>\r\n    </div>)\r\n}\r\nexport default BatchesDetails","C:\\Users\\goutlaks\\TrainSoft-Labs\\trainsoft-ui\\src\\Components\\Pagination\\Pagination.js",["169"],"\r\nimport React, { useState, useEffect } from 'react';\r\nimport Pagination from 'react-bootstrap/Pagination';\r\n\r\nfunction PaginationOne(props) {\r\n    const [paginateInfo, setPaginateInfo] = useState({});\r\n\r\n    // This method used to construct pagination array\r\n    const Paginate = (totalItems, currentPage = 1, pageSize = props.pageCount ? props.pageCount : 10, maxPages = 10) => {\r\n        // calculate total pages\r\n        let totalPages = Math.ceil(totalItems / pageSize);\r\n\r\n        // ensure current page isn't out of range\r\n        if (currentPage < 1) {\r\n            currentPage = 1;\r\n        } else if (currentPage > totalPages) {\r\n            currentPage = totalPages;\r\n        }\r\n\r\n        let startPage, endPage;\r\n        if (totalPages <= maxPages) {\r\n            // total pages less than max so show all pages\r\n            startPage = 1;\r\n            endPage = totalPages;\r\n        } else {\r\n            // total pages more than max so calculate start and end pages\r\n            let maxPagesBeforeCurrentPage = Math.floor(maxPages / 2);\r\n            let maxPagesAfterCurrentPage = Math.ceil(maxPages / 2) - 1;\r\n            if (currentPage <= maxPagesBeforeCurrentPage) {\r\n                // current page near the start\r\n                startPage = 1;\r\n                endPage = maxPages;\r\n            } else if (currentPage + maxPagesAfterCurrentPage >= totalPages) {\r\n                // current page near the end\r\n                startPage = totalPages - maxPages + 1;\r\n                endPage = totalPages;\r\n            } else {\r\n                // current page somewhere in the middle\r\n                startPage = currentPage - maxPagesBeforeCurrentPage;\r\n                endPage = currentPage + maxPagesAfterCurrentPage;\r\n            }\r\n        }\r\n\r\n        // calculate start and end item indexes\r\n        let startIndex = (currentPage - 1) * pageSize;\r\n        let endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\r\n\r\n        // create an array of pages to ng-repeat in the pager control\r\n        let pages = Array.from(Array((endPage + 1) - startPage).keys()).map(i => startPage + i);\r\n\r\n        // return object with all pager properties required by the view\r\n        return {\r\n            totalItems: totalItems,\r\n            currentPage: currentPage,\r\n            pageSize: pageSize,\r\n            totalPages: totalPages,\r\n            startPage: startPage,\r\n            endPage: endPage,\r\n            startIndex: startIndex,\r\n            endIndex: endIndex,\r\n            pages: pages\r\n        };\r\n    };\r\n\r\n    // Fires when user clicked on page navigation\r\n    const onNavigate = (pageNumber = 1) => {\r\n        initPagination(pageNumber);\r\n        props.onNavigate(pageNumber);\r\n    };\r\n\r\n    // This method is for Initialize pagination component\r\n    const initPagination = (currentPageNumber = 1) => {\r\n        try {\r\n            setPaginateInfo({ ...Paginate(props.totalCount, currentPageNumber) });\r\n        } catch (err) {\r\n            console.error(\"Error occurred while initPagination\" + err);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (props.totalCount) initPagination(1); // Initialize pagination layout, Default page number: 1\r\n    }, [props.totalCount]);\r\n\r\n\r\n    return (\r\n        <>\r\n            {paginateInfo && paginateInfo.totalPages > 1 && <div className=\"flx flx-center pagination-bar\">\r\n                {/* <div className=\"text-muted mr10\">Showing {paginateInfo.currentPage} of {paginateInfo.totalPages}</div> */}\r\n                <div className=\"flx1\">\r\n                    <Pagination size=\"sm\">\r\n                        <Pagination.First disabled={paginateInfo.currentPage === 1} onClick={() => onNavigate(1)} />\r\n                        <Pagination.Prev disabled={paginateInfo.currentPage === 1} onClick={() => onNavigate(paginateInfo.currentPage - 1)} />\r\n                        {paginateInfo && paginateInfo.pages.map((page, i) => {\r\n                            return (\r\n                                <Pagination.Item key={i} active={page === paginateInfo.currentPage} onClick={() => onNavigate(page)}>{page}</Pagination.Item>\r\n                            )\r\n                        })}\r\n                        <Pagination.Next disabled={paginateInfo.currentPage === paginateInfo.totalPages} onClick={() => onNavigate(paginateInfo.currentPage + 1)} />\r\n                        <Pagination.Last disabled={paginateInfo.currentPage === paginateInfo.totalPages} onClick={() => onNavigate(paginateInfo.totalPages)} />\r\n                    </Pagination>\r\n                </div>\r\n            </div>\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default PaginationOne;\r\n","C:\\Users\\goutlaks\\TrainSoft-Labs\\trainsoft-ui\\src\\Screens\\Participants\\ParticipantsDetails.js",["170","171"],"import { useState } from \"react\";\r\nimport '../Batches/batches.css'\r\n\r\nimport './participants.css'\r\nimport DynamicTable from \"../../Components/DynamicTable/DynamicTable\";\r\nimport { ICN_TRASH, ICN_EDIT, ICN_BATCHES, ICN_ON_GOING, ICN_PROGRESS, ICN_COMPLETED, ICN_PASSED, ICN_EMAIL_W, ICN_TEXT_W } from \"../../Constant/Icon\";\r\nimport PaginationOne from \"../../Components/Pagination/Pagination\";\r\nimport Card from \"../../Components/Card/Card\";\r\nimport { Button } from \"../../Components/Buttons/Buttons\";\r\n\r\n\r\n\r\n\r\nconst dummyData = [\r\n    { batchName: 'ITU_01', empId: '10290', emailId: 'benits@msn.com', phoneNo: '(659) 768-1869', status: 'passed' },\r\n    { batchName: 'ITU_02', empId: '10290', emailId: 'drewf@optonline.net', phoneNo: '(659) 768-1869', status: 'passed' },\r\n    { batchName: 'ITU_03', empId: '10290', emailId: 'devphil@sbcglobal.net', phoneNo: '(659) 768-1869', status: 'passed' },\r\n    { batchName: 'ITU_04', empId: '10290', emailId: 'cliffski@me.com', phoneNo: '(659) 768-1869', status: 'passed' },\r\n    { batchName: 'ITU_05', empId: '10290', emailId: '22 june 2020', phoneNo: '(659) 768-1869', status: 'passed' },\r\n\r\n]\r\n\r\nconst createBatches = {\r\n    batchName: '',\r\n    trainingType: '',\r\n    endDate: '',\r\n    startDate: '',\r\n    course: '',\r\n    instructor: ''\r\n\r\n}\r\nconst Participant = () => {\r\n    const [configuration, setConfiguration] = useState({\r\n        columns: {\r\n            \"batchName\": {\r\n                \"title\": \"Name\",\r\n                \"sortDirection\": null,\r\n                \"sortEnabled\": false,\r\n                isSearchEnabled: false,\r\n            },\r\n            \"empId\": {\r\n                \"title\": \"Emp Id\",\r\n                \"sortDirection\": null,\r\n                \"sortEnabled\": false,\r\n                isSearchEnabled: false\r\n            }\r\n            ,\r\n            \"emailId\": {\r\n                \"title\": \"Email Id\",\r\n                \"sortDirection\": null,\r\n                \"sortEnabled\": false,\r\n                isSearchEnabled: false\r\n            }\r\n            ,\r\n            \"phoneNo\": {\r\n                \"title\": \"Phone Number\",\r\n                \"sortDirection\": null,\r\n                \"sortEnabled\": false,\r\n                isSearchEnabled: false\r\n            }\r\n            ,\r\n            \"status\": {\r\n                \"title\": \"Status\",\r\n                \"sortDirection\": null,\r\n                \"sortEnabled\": false,\r\n                isSearchEnabled: false\r\n            }\r\n        },\r\n        headerTextColor: '#454E50', // user can change table header text color\r\n        sortBy: null,  // by default sort table by name key\r\n        sortDirection: false, // sort direction by default true\r\n        updateSortBy: (sortKey) => {\r\n            configuration.sortBy = sortKey;\r\n            Object.keys(configuration.columns).map(key => configuration.columns[key].sortDirection = (key === sortKey) ? !configuration.columns[key].sortDirection : false);\r\n            configuration.sortDirection = configuration.columns[sortKey].sortDirection;\r\n            setConfiguration({ ...configuration });\r\n        },\r\n        actions: [\r\n            {\r\n                \"title\": \"Edit\",\r\n                \"icon\": ICN_EDIT,\r\n                \"onClick\": (data, i) => console.log(data)\r\n            },\r\n            {\r\n                \"title\": \"Delete\",\r\n                \"icon\": ICN_TRASH,\r\n                \"onClick\": (data, i) => console.log(data)\r\n            }\r\n        ],\r\n        actionCustomClass: \"no-chev esc-btn-dropdown\", // user can pass their own custom className name to add/remove some css style on action button\r\n        actionVariant: \"\", // user can pass action button variant like primary, dark, light,\r\n        actionAlignment: true, // user can pass alignment property of dropdown menu by default it is alignLeft \r\n        // call this callback function onSearch method in input field on onChange handler eg: <input type=\"text\" onChange={(e) => onSearch(e.target.value)}/>\r\n        // this search is working for search enable fields(column) eg. isSearchEnabled: true, in tale column configuration\r\n        searchQuery: \"\",\r\n        tableCustomClass: \"ng-table sort-enabled table-borderless\", // table custom class\r\n        showCheckbox: false,\r\n        clearSelection: false\r\n    });\r\n\r\n    const activityData = [\r\n        { icon: ICN_ON_GOING, name: 'Assigned', data: '15' },\r\n        { icon: ICN_PROGRESS, name: 'In Progress', data: '10' },\r\n        { icon: ICN_COMPLETED, name: 'Completed', data: '8' },\r\n        { icon: ICN_PASSED, name: 'Passed', data: '7' },\r\n    ]\r\n    return (<div className=\"table-shadow p-3\">\r\n        <div className=\"flx full-h\">\r\n            <div className=\"box-shadow flx1 p-2 mr-3\">\r\n                <div className=\"user-profile-container\">\r\n                    <div className=\"jcb\">\r\n                        <div className=\"user-pf\">Us</div>\r\n                    </div>\r\n\r\n                    <div className=\"jcb mt-2\">\r\n                        <Button>{ICN_EMAIL_W} <span className=\"pl-3\">Email</span></Button>\r\n                        <Button>{ICN_TEXT_W} <span className=\"pl-3\">Text</span></Button>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"flx3\">\r\n                <div className=\"jcb\">\r\n                    {activityData.map((p, i) => <div key={i} className=\"user-activity\">\r\n                        <div className=\"activities-btn\">\r\n                            {p.icon}\r\n                        </div>\r\n                        <div className=\"jcb-c text-right\">\r\n                            <div className=\"title-lg\">{p.data}</div>\r\n                            <div className=\"title-sm\">{p.name}</div>\r\n                        </div>\r\n                    </div>)}\r\n\r\n                </div>\r\n                <div>\r\n                    {/* ..........Analytic......... */}\r\n                    <Card title=\"Activities\" >\r\n                        <DynamicTable {...{ configuration, sourceData: dummyData }} />\r\n                        <div className=\"pagination-div\">\r\n                            <PaginationOne totalCount={30} onNavigate={(pageNumber) => console.log(pageNumber)} />\r\n\r\n                        </div>\r\n                    </Card>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    </div>)\r\n}\r\nexport default Participant",{"ruleId":"172","replacedBy":"173"},{"ruleId":"174","replacedBy":"175"},{"ruleId":"176","severity":1,"message":"177","line":5,"column":8,"nodeType":"178","messageId":"179","endLine":5,"endColumn":14},{"ruleId":"176","severity":1,"message":"180","line":6,"column":8,"nodeType":"178","messageId":"179","endLine":6,"endColumn":15},{"ruleId":"176","severity":1,"message":"181","line":1,"column":10,"nodeType":"178","messageId":"179","endLine":1,"endColumn":16},{"ruleId":"176","severity":1,"message":"182","line":2,"column":18,"nodeType":"178","messageId":"179","endLine":2,"endColumn":22},{"ruleId":"172","replacedBy":"183"},{"ruleId":"174","replacedBy":"184"},{"ruleId":"176","severity":1,"message":"185","line":13,"column":8,"nodeType":"178","messageId":"179","endLine":13,"endColumn":27},{"ruleId":"176","severity":1,"message":"186","line":3,"column":8,"nodeType":"178","messageId":"179","endLine":3,"endColumn":20},{"ruleId":"176","severity":1,"message":"187","line":12,"column":7,"nodeType":"178","messageId":"179","endLine":12,"endColumn":16},{"ruleId":"176","severity":1,"message":"188","line":6,"column":7,"nodeType":"178","messageId":"179","endLine":6,"endColumn":17},{"ruleId":"189","severity":1,"message":"190","line":17,"column":168,"nodeType":"191","messageId":"192","endLine":17,"endColumn":169},{"ruleId":"189","severity":1,"message":"190","line":17,"column":231,"nodeType":"191","messageId":"192","endLine":17,"endColumn":234},{"ruleId":"193","severity":1,"message":"194","line":178,"column":8,"nodeType":"195","endLine":178,"endColumn":20,"suggestions":"196"},{"ruleId":"193","severity":1,"message":"197","line":188,"column":8,"nodeType":"195","endLine":188,"endColumn":44,"suggestions":"198"},{"ruleId":"193","severity":1,"message":"199","line":193,"column":8,"nodeType":"195","endLine":193,"endColumn":71,"suggestions":"200"},{"ruleId":"176","severity":1,"message":"201","line":5,"column":10,"nodeType":"178","messageId":"179","endLine":5,"endColumn":19},{"ruleId":"176","severity":1,"message":"202","line":18,"column":7,"nodeType":"178","messageId":"179","endLine":18,"endColumn":20},{"ruleId":"193","severity":1,"message":"203","line":82,"column":8,"nodeType":"195","endLine":82,"endColumn":26,"suggestions":"204"},{"ruleId":"176","severity":1,"message":"205","line":6,"column":31,"nodeType":"178","messageId":"179","endLine":6,"endColumn":42},{"ruleId":"176","severity":1,"message":"202","line":23,"column":7,"nodeType":"178","messageId":"179","endLine":23,"endColumn":20},"no-native-reassign",["206"],"no-negated-in-lhs",["207"],"no-unused-vars","'Header' is defined but never used.","Identifier","unusedVar","'Sidebar' is defined but never used.","'render' is defined but never used.","'Link' is defined but never used.",["206"],["207"],"'ParticipantsDetails' is defined but never used.","'DynamicTable' is defined but never used.","'dummyData' is assigned a value but never used.","'htmlParser' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '>' and '!=='.","BinaryExpression","unexpectedMixedOperator","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'isSelectedAll'. Either include it or remove the dependency array.","ArrayExpression",["208"],"React Hook useEffect has a missing dependency: 'onSelectAll'. Either include it or remove the dependency array.",["209"],"React Hook useEffect has missing dependencies: 'props.configuration' and 'sourceData'. Either include them or remove the dependency array. You can also do a functional update 'setSourceData(s => ...)' if you only need 'sourceData' in the 'setSourceData' call.",["210"],"'ICN_EVENT' is defined but never used.","'createBatches' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'initPagination'. Either include it or remove the dependency array.",["211"],"'ICN_BATCHES' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"212","fix":"213"},{"desc":"214","fix":"215"},{"desc":"216","fix":"217"},{"desc":"218","fix":"219"},"Update the dependencies array to be: [isSelectedAll, sourceData]",{"range":"220","text":"221"},"Update the dependencies array to be: [onSelectAll, props.configuration.clearSelection]",{"range":"222","text":"223"},"Update the dependencies array to be: [props.configuration, props.configuration.sortBy, props.configuration.sortDirection, sourceData]",{"range":"224","text":"225"},"Update the dependencies array to be: [initPagination, props.totalCount]",{"range":"226","text":"227"},[9327,9339],"[isSelectedAll, sourceData]",[9704,9740],"[onSelectAll, props.configuration.clearSelection]",[10017,10080],"[props.configuration, props.configuration.sortBy, props.configuration.sortDirection, sourceData]",[3196,3214],"[initPagination, props.totalCount]"]